[package]
name = "qr"
version = "0.1.0"
authors = ["Artem Varaksa <aymfst@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook", "smartstring"]

[dependencies]
qrcode = "0.12"
url = "2.2"
cfg-if = "1.0"
wasm-bindgen = "0.2"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
wee_alloc = { version = "0.4", optional = true }

# `smartstring` reuses the `String` type to give a thinner `String` for
# those less than 3 * sizeof::<usize>() - 1 (except >=512 bit systems)
# The downsides are essentially that longer strings are slower. This is
# a non-issue for this use case.
smartstring = { version = "0.2", optional = true }

[dev-dependencies]
wasm-bindgen-test = "0.2"

[profile.release]
# Tell `rustc` to optimize for small code size.
# opt-level = "s"

# Tell rustc to optimise for speed
opt-level = 3

[package.metadata.wasm-pack.profile.release]
# wasm-opt = ["-Oz", "--enable-mutable-globals"]
wasm-opt = ["-O3", "--enable-mutable-globals"]
